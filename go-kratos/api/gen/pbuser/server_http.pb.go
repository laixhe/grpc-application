// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.31.1
// source: proto/pbuser/server.proto

package pbuser

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSUserInfo = "/pbuser.SUser/Info"
const OperationSUserList = "/pbuser.SUser/List"
const OperationSUserUpdate = "/pbuser.SUser/Update"

type SUserHTTPServer interface {
	// Info 用户信息
	Info(context.Context, *InfoRequest) (*User, error)
	// List 用户列表
	List(context.Context, *ListRequest) (*ListResponse, error)
	// Update 用户更新
	Update(context.Context, *UpdateRequest) (*User, error)
}

func RegisterSUserHTTPServer(s *http.Server, srv SUserHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/user/info", _SUser_Info0_HTTP_Handler(srv))
	r.GET("/api/v1/user/list", _SUser_List0_HTTP_Handler(srv))
	r.POST("/api/v1/user/update", _SUser_Update0_HTTP_Handler(srv))
}

func _SUser_Info0_HTTP_Handler(srv SUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in InfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSUserInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Info(ctx, req.(*InfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*User)
		return ctx.Result(200, reply)
	}
}

func _SUser_List0_HTTP_Handler(srv SUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSUserList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.List(ctx, req.(*ListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListResponse)
		return ctx.Result(200, reply)
	}
}

func _SUser_Update0_HTTP_Handler(srv SUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSUserUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Update(ctx, req.(*UpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*User)
		return ctx.Result(200, reply)
	}
}

type SUserHTTPClient interface {
	Info(ctx context.Context, req *InfoRequest, opts ...http.CallOption) (rsp *User, err error)
	List(ctx context.Context, req *ListRequest, opts ...http.CallOption) (rsp *ListResponse, err error)
	Update(ctx context.Context, req *UpdateRequest, opts ...http.CallOption) (rsp *User, err error)
}

type SUserHTTPClientImpl struct {
	cc *http.Client
}

func NewSUserHTTPClient(client *http.Client) SUserHTTPClient {
	return &SUserHTTPClientImpl{client}
}

func (c *SUserHTTPClientImpl) Info(ctx context.Context, in *InfoRequest, opts ...http.CallOption) (*User, error) {
	var out User
	pattern := "/api/v1/user/info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSUserInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SUserHTTPClientImpl) List(ctx context.Context, in *ListRequest, opts ...http.CallOption) (*ListResponse, error) {
	var out ListResponse
	pattern := "/api/v1/user/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSUserList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SUserHTTPClientImpl) Update(ctx context.Context, in *UpdateRequest, opts ...http.CallOption) (*User, error) {
	var out User
	pattern := "/api/v1/user/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSUserUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
